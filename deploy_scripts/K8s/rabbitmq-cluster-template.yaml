apiVersion: v1
items:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: rabbitmq-discovery
- apiVersion: authorization.openshift.io/v1
  kind: RoleBinding
  metadata:
    name: rabbitmq-discovery-view
  roleRef:
    kind: Role
    name: view
  subjects:
  - kind: ServiceAccount
    name: rabbitmq-discovery
- apiVersion: v1
  kind: Secret
  metadata:
    name: rabbitmq-cluster-secret
  stringData:
    cookie: mEhr6rLKgcUcaRjV
    password: admin 
    url: amqp://rabbitmq:u5WYMrWoQwP22HsW@rabbitmq-cluster-balancer
    username: admin 
  type: Opaque
- apiVersion: v1
  data:
    enabled_plugins: |
      [rabbitmq_management,rabbitmq_peer_discovery_k8s].
    rabbitmq.conf: |
      loopback_users.guest = false

      ## Clustering
      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
      cluster_formation.k8s.address_type = hostname
      cluster_formation.k8s.service_name = rabbitmq-cluster
      cluster_formation.k8s.hostname_suffix = .rabbitmq-cluster.mongo.svc.cluster.local
      cluster_formation.node_cleanup.interval = 10
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = autoheal
      ## queue master locator
      queue_master_locator=min-masters
  kind: ConfigMap
  metadata:
    name: rabbitmq-cluster-config
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: rabbitmq-cluster
      type: LoadBalancer
    name: rabbitmq 
  spec:
    ports:
    - name: http
      port: 15672
      protocol: TCP
      targetPort: 15672
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      app: rabbitmq-cluster
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: rabbitmq-cluster
    name: rabbitmq-cluster
  spec:
    clusterIP: None
    ports:
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: clustering
      port: 25672
      targetPort: 25672
    selector:
      app: rabbitmq-cluster
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: rabbitmq-cluster-internal-access
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            app: rabbitmq-cluster
    podSelector:
      matchLabels:
        app: rabbitmq-cluster
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: rabbitmq-cluster
    name: rabbitmq-cluster
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: rabbitmq-cluster
    serviceName: rabbitmq-cluster
    template:
      metadata:
        labels:
          app: rabbitmq-cluster
      spec:
        containers:
        - args:
          - -c
          - cp -v /etc/rabbitmq/rabbitmq.conf ${RABBITMQ_CONFIG_FILE}.conf; exec docker-entrypoint.sh
            rabbitmq-server
          command:
          - sh
          env:
          - name: RABBITMQ_DEFAULT_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: rabbitmq-cluster-secret
          - name: RABBITMQ_DEFAULT_PASS
            valueFrom:
              secretKeyRef:
                key: password
                name: rabbitmq-cluster-secret
          - name: RABBITMQ_ERLANG_COOKIE
            valueFrom:
              secretKeyRef:
                key: cookie
                name: rabbitmq-cluster-secret
          - name: K8S_SERVICE_NAME
            value: rabbitmq-cluster
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          - name: RABBITMQ_NODENAME
            value: rabbit@$(POD_NAME).rabbitmq-cluster.$(POD_NAMESPACE).svc.cluster.local
          - name: RABBITMQ_CONFIG_FILE
            value: /var/lib/rabbitmq/rabbitmq
          image: rabbitmq:3.8-management
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - rabbitmqctl
              - status
            initialDelaySeconds: 30
            timeoutSeconds: 10
          name: rabbitmq
          ports:
          - containerPort: 15672
            name: http
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 25672
            name: clustering
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - rabbitmqctl
              - status
            initialDelaySeconds: 10
            timeoutSeconds: 10
          volumeMounts:
          - mountPath: /etc/rabbitmq
            name: config-volume
          - mountPath: /var/lib/rabbitmq
            name: rabbitmq-storage
        serviceAccountName: rabbitmq-discovery
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            items:
            - key: rabbitmq.conf
              path: rabbitmq.conf
            - key: enabled_plugins
              path: enabled_plugins
            name: rabbitmq-cluster-config
          name: config-volume
    volumeClaimTemplates:
    - metadata:
        name: rabbitmq-storage
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
kind: List
metadata: {}
